= Crabgrass Mods

Mods are plugins that modify the crabgrass application. They are specific
to crabgrass, and won't run on other rails apps.

== Creating Mods

A crabgrass mod is identical to a plugin. By convention, they live in
RAILS_ROOT/mods or RAILS_ROOT/tools.


== Modifying Crabgrass Models

In the mods init.rb:

  extend_model :Crow do
    has_many :feathers
    def feather_color
      'black'
    end
    def make_sound
      'squawk'
    end
  end

This only works for models that have 'acts_as_extensive' included somewhere in
their class definition.

== View Listeners

Suppose the main application had this in a view:

  <%= call_hook :menu, :some_variable => true %>

You can create a listener for this hook in your plugin. When this hook
is called, all the listeners for that hook are called and their output
returned.

In your plugin's init.rb:

  Dispatcher.to_prepare do
    require 'my_listener'
  end

In your plugin's lib/my_listener.rb

  class MyListener < Crabgrass::Hook::ViewListener
    include Singleton

    def menu(context)
      'hi' if context[:some_variable] == true
    end
  end

In this case, the 'call_hook' command will return 'hi'.

In your ViewListener, you can use any method that is available to a
view.

== Code Listeners





== Customizing the stylesheets and javascript from a plugin

Simply define a listener for html_head. Whatever you return will get inserted there. 

For example, <tt>mods/mymod/lib/my_view_listener.rb</tt>:

  class MyViewListener < Crabgrass::Hook::ViewListener
    include Singleton

    def html_head(context)
      return unless params[:controller] == 'whatever'
      stylesheet_link_tag('mycss', :plugin => 'mymod')
    end
  end

Alternately, you could specify custom javascript or a favicon.

In this case, the stylesheet_link_tag will link to the file <tt>mods/mymod/assets/stylesheets/mycss.css</tt>


