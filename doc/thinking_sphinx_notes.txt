Notes on sphinx search in crabgrass
===================================

There needs to be something akin to a page_index for the sql search that elijah want to use

The most recent version of thinking sphinx does not need this, though, since we can make different indexes for different subclasses of page

It might be classiest have the subclasses do their own indices, instead of having a page_index model
The current page types:
* asset
* core
** discussion
** info
** message
** request
** request discussion
* event
* ranked vote
* rate many
* task list
* wiki

Benefits:
* Good code encapsulation

Drawbacks:
* Might lead to duplicate code
* Not as flexible
* Does not work with current thinking_sphinx (probably the index rake task is not looking in the tools/tool/app/model dir)

Federated Search
----------------

It would be really really beautiful if there were many crabgrass installs and a single interface to all of them.  Then people can keep their sensitive data in the server of their choice, and one server going down will not destroy the system.  Search will be a challenge in this setting.

One way it could work is to use ajax.  The search page could serve results from the "primary" server, and also fire off requests for the same search to be performed on the federated servers.  Then a little javascript magic on the client side could assemble these results into a single list (possibly with google-jstemplate).  Pagination would be a challenge.



Work Log
--------

Abie, 2008 08
Mon, Aug 11:
* Meet to discuss dev process

Tues, Aug 12:  
* Made issues pages, as we agreed, to outline scope of work for this phase
* Upgraded Sphinx to 0.9.8, which turned out to be straight forward

Wed, Aug 13:
* Write, test code in page model, and page subclasses 10 (10 AM - 12 PM)


Talking w Elijah Aug 19:
========================

Currently, we have several functions to build options:
  options_for_me
  options_for_inbox
  options_for_group

Maybe we should combine these all into one function
<code>
# options_for accepts several types
# accepted types:
#   :me
#   :inbox
#   :group
def options_for(type,options)
  if use_sphinx and sphinx_builder.handle_options(type)
    sphinx_builder.options_for(type, options)
  else
    sql_builder.options_for(type,options)
  end
end

sphinx
  def handle_options(type)
    return false if type == :inbox
  end
end
</code>


currently, we have an entities column in the page_index table.  The model might look like this:
@@ page_index.entities = "public user_1 user_2 group_1 group_100"

Then we can say things like
@@ Page.search :conditions => {:entities => "(user_1 | group_1 | group_100) & group_2" }

Thinking Sphinx doesn't make it easy to do an "OR" across attributes; this code produces an "AND"
@@ Page.search :conditions => {:group_ids => "1", :user_ids => '1'}

ts does have a way to exclude thing ("NAND")
@@ Page.search :conditions => {:group_ids => "1", :user_ids => '1'}, :without => {:created_by => 2}

There is some risk that matches will be "too smart for their own good".  If sphinx were to match user_5612 to a search for user_561 because they are close to the same, this would be bad for security.  Will it do this?  Initial tests suggest not.  The relevant documentation is not enlightening.
  http://www.sphinxsearch.com/doc.html#extended-syntax


