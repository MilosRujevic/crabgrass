<script type='text/javascript'>
  function doAllOpenLayers() {
    function loadcssfile(tag, filetype){
      var filename;
      var match = /href=&quot;(\S+)&quot;/.exec(tag);
      if (match) {
        filename = match[1];
        var fileref=document.createElement("link");
        fileref.setAttribute("rel", "stylesheet");
        fileref.setAttribute("type", "text/css");
        fileref.setAttribute("href", filename);
        $$('head').first().insert({
            bottom: fileref
        });
      }
     } // end function loadjscssfile

    loadcssfile('<%= h stylesheet_link_tag("style", :plugin => "openlayers") %>', "css");
    <% if @map and @map.override_stylesheet %>
      loadcssfile('<%= h stylesheet_link_tag(@map.override_stylesheet) %>', "css");
    <% end %>

    // inject map div
    var mapdiv = new Element('div', {id: 'map', style: 'width: <%= @map.width %>px; height: <%= @map.height %>px;'});
    $$('#map-container').first().insert({bottom: mapdiv});

    loadMap();

    function loadMap() {
    var map;
    var layer;
    var controls = [ new OpenLayers.Control.Navigation({zoomWheelEnabled: false}),
      new OpenLayers.Control.PanZoom(),
      new OpenLayers.Control.ArgParser(),
      new OpenLayers.Control.Attribution()]
    var options = {
      theme: false,
      maxExtent: new OpenLayers.Bounds(-20037508.34,-20037508.34,20037508.34,20037508.34),
      numZoomLevels: 19,
      maxResolution: 156543.0399,
      units: 'm',
      projection: new OpenLayers.Projection("EPSG:900913"),
      displayProjection: new OpenLayers.Projection("EPSG:4326"),
      controls: controls
    };
    map = new OpenLayers.Map('map', options);
    <% if current_site.evil.respond_to?(:[]) && current_site.evil["google_streets"] %>
      layer = new OpenLayers.Layer.Google("Google Streets");
    <% else %>
      layer = new OpenLayers.Layer.OSM();
    <% end %>
    map.addLayer(layer);
    var kml = new OpenLayers.Layer.GML("MRU", "<%= @map.kml %>", 
      {
      format: OpenLayers.Format.KML, 
      formatOptions: {
      extractStyles: true, 
      extractAttributes: true
      },
      projection: map.displayProjection
    });
    map.addLayer(kml);
    // Events for the objects of the KML-Data
    kml.events.on({
      'featureselected': onFeatureSelect,
      'featureunselected': onFeatureUnselect
    });

    var control = new OpenLayers.Control.SelectFeature(kml);
    map.addControl(control);
    control.activate();
             
    map.addControl(new OpenLayers.Control.LayerSwitcher());

    var lonLat = new OpenLayers.LonLat(<%= @map.mapcenterlong.to_i %>,<%= @map.mapcenterlat.to_i %>).transform(map.displayProjection,  map.projection);
    map.setCenter (lonLat, 2); 

    function onPopupClose(evt) {
      control.unselect(this.feature);
    }
    function onFeatureSelect(evt) {
      feature = evt.feature;
			popup_description = feature.attributes.description;
      popup = new OpenLayers.Popup.FramedCloud("featurePopup",
        feature.geometry.getBounds().getCenterLonLat(),
        new OpenLayers.Size(200,200),
				// if the description is an ajax call, this just adds a div that can be populated
				renderKMLDescription(popup_description),
        null, true, onPopupClose);
      feature.popup = popup;
      popup.feature = feature;
			// if the description is an ajax call, run the ajax request 
			// and show the marker on success 
			map.addPopup(popup);
			if (match = popup_description.match(/^ajax:(.*)$/)) {
				new Ajax.Request(match[1], {
					method: 'get',
					onLoading: function() {
						$('popup_spinner').show();
					},
				  onComplete: function() {
						$('popup_spinner').hide();
					}
				});
			}else {
				// otherwise just show the marker
				map.addPopup(popup);
			}
    }
    function renderKMLDescription(desc) {
			var match = [];
			if (match = desc.match(/^ajax:/)) {
				return '<div id="popup_entities_list"><img src="/images/spinner.gif" id="popup_spinner" style="display:none;"></div>'
			}else {
				return desc;
			}
		}
    function onFeatureUnselect(evt) {
      feature = evt.feature;
      if (feature.popup) {
        popup.feature = null;
        map.removePopup(feature.popup);
        feature.popup.destroy();
        feature.popup = null;
      }
    }
    //map.zoomToMaxExtent();
    map.zoomTo(<%= @map.zoomlevel %>);
  } // end function loadMap()
  }// end function doAllOpenLayers

  document.observe("dom:loaded", doAllOpenLayers());
</script>
