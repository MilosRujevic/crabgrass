hostport = url_for(:controller => 'account', :only_path => false).gsub(/\/$/, '')
xml.instruct!
xml.rss :version => '2.0',
  'xmlns:media' => 'http://search.yahoo.com/mrss/' do
  xml.channel do
    if @group
      # this is arguably an abuse of gibberish, but it works
      xml.title :media_for_group.t % ["media_#{@type}s".t, @group.full_name]
      xml.link hostport + "/" + @group.name
      xml.description :media_for_group.t % ["media_#{@type}s".t, @group.full_name]
    else
      xml.title :media_without_group.t % "media_#{@type}s".t
      xml.link hostport + "/"
      xml.description :media_without_group.t % "media_#{@type}s".t
    end

    if @media.size > 0
      xml.lastBuildDate @media[0].updated_at.to_s(:rfc822)
    end
    xml.generator "crabgrass"
    xml.docs "http://blogs.law.harvard.edu/tech/rss"

    @media.each do |asset|
      xml.item do
        if asset.page
          xml.title asset.page.title
          xml.description asset.page.summary
          xml.author "nobody@example.com (#{asset.page.updated_by.login})"
          xml.link hostport + page_url(asset.page)
        else
          # does this ever happen?
          xml.title asset.filename
        end
        xml.pubDate asset.updated_at.to_s(:rfc822)
        xml.guid 'tag:riseup.net,2008/crabgrass-asset/' + Digest::SHA1.hexdigest("#{asset.id.to_s}--#{asset.filename}"), :isPermaLink => false
        xml.enclosure :url => (hostport + asset.url), :length => asset.size, :type => asset.content_type
        instances = [asset] + asset.thumbnails.select{|i| i.exists?}
        case instances.size
        when 0
          # shouldn't ever happen
        when 1
          xml << render(:partial => 'rss_media_content', :locals => {:instance => instances[0], :asset => asset, :hostport => hostport})
        else
          xml.media :group do
            instances.each do |instance|
              xml << render(:partial => 'rss_media_content', :locals => {:instance => instance, :asset => asset, :hostport => hostport})
            end
          end
        end
      end
    end
  end
end
