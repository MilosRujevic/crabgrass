<% 
  empty_box = false if empty_box.nil? 

  # the remote action that is triggered when the 'add' button is pressed (or 
  # the popup item is selected).
  add_action = {
    :url => {:controller => 'base_page/share', :action => 'update', :page_id => nil, :add => true}, 
    :with => %{'recipient[name]=' + $('recipient_name').value + '&recipient[access]=' + $('recipient[access]').value}
  }

  add_button_id = 'add_recipient_button'
  autocomplete_id_number = rand(1000000)

  # (1) submit the form when the enter key is pressed in the text box
  # (2) don't submit the form if the recipient name field is empty
  # (3) eat the event by returning false on a enter key so that the form
  #     is not submitted.
  eat_return = "return(!enterPressed(event));"
  only_on_key_press = "enterPressed(event) && $('recipient_name').value != ''"
  key_pressed_function = remote_function(
    add_action.merge(
      :condition => only_on_key_press,
      :loading => spinner_icon_on('plus', add_button_id),
      :complete => spinner_icon_off('plus', add_button_id)
    )
  ) + eat_return; 

  # this is called after an item in the popup has been selected.
  # it makes it so selecting an item is like hitting the add button
  # we clear the recipient_name field so that we don't get a double submit
  after_update_function = "function(value, data) { #{remote_function(add_action)}; $('recipient_name').value='';}"

  # called in order to render a popup row
  # it is a little too complicated. basically, we want to just highlight
  # the text but not the html tags.
  render_popup_row_function = %Q[function(value, re, data) {return '<p class=\"name_icon xsmall\" style=\"background-image: url(/avatars/'+data+'/xsmall.jpg)\">' + value.replace(/^<em>(.*)<\\/em>(<br\\/>(.*))?$/gi, function(m, m1, m2, m3){return '<em>' + Autocomplete.highlight(m1,re) + '</em>' + (m3 ? '<br/>' + Autocomplete.highlight(m3, re) : '')}) + '</p>';}]

  # called to convert the row data into a value
  extract_value_from_row_function = %Q[function(value){return value.replace(/<em>(.*)<\\/em>.*/g,'$1');}]

  auto_complete_js = %Q[
    new Autocomplete('recipient_name', { 
      serviceUrl:'/base_page/share/auto_complete',
      minChars:2,
      maxHeight:400,
      width:300,
      onSelect: #{after_update_function},
      rowRenderer: #{render_popup_row_function},
      selectValue: #{extract_value_from_row_function}
    }, #{autocomplete_id_number});
  ]

  # if there are no recipients at all, we will do not show the box
  recipients_exist = @page && @page.recipients.any?
%>
<table class='share_page_recipient_add'>
  <tr>
    <td><%= 'User or group name'[:user_or_group_name]%>:</td>
    <td>&nbsp;</td>
    <td><%= 'Grant Access'[:grant_access]%>:</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td style='width:100%'>
      <%= text_field_tag 'recipient_name', '', :style => 'width:100%',
          :onkeypress => key_pressed_function %>
      <%= javascript_tag(auto_complete_js) %>
    </td>
    <td>&nbsp;</td>
    <td>
      <%- if @page.nil? or current_user.may?(:admin,@page) -%>
        <%= select_page_access 'recipient[access]', :blank => false %>
      <%- end -%>
    </td>
    <td>
      <%= link_to_remote_icon('plus', add_action, :id => add_button_id) %>
    </td>
  </tr>
</table>
<div id="share_page_recipient_area" <%='style="display:none"' if (!recipients_exist || empty_box) %>>
  <%= render :partial => 'base_page/share/list_of_recipients', :locals => {:empty_box => empty_box} %>   
</div>

